/***************************************************************************
* Copyright (c) 2016, Johan Mabille, Sylvain Corlay and Wolf Vollprecht    *
*                                                                          *
* Distributed under the terms of the BSD 3-Clause License.                 *
*                                                                          *
* The full license is in the file LICENSE, distributed with this software. *
****************************************************************************/

#include <algorithm>

#include "gtest/gtest.h"
#include "xtensor/xarray.hpp"
#include "xtensor/xfixed.hpp"
#include "xtensor/xnoalias.hpp"
#include "xtensor/xstrided_view.hpp"
#include "xtensor/xtensor.hpp"
#include "xtensor/xview.hpp"

namespace xt
{
    using namespace xt::placeholders;

    /*py
    a = np.arange(35).reshape(5, 7)
    */
    TEST(xstrided_view_extended, negative_slices_twod)
    {
        xt::xarray<double> a = xt::arange(35);
        a.reshape({5, 7});
        // py_av0 = a[:-2, ::-1]
        auto av0 = xt::strided_view(a, {_r|_|-2, _r|_|_|-1});
        EXPECT_EQ(av0, py_av0);
        // py_av1 = a[::-1, ::-1]
        auto av1 = xt::strided_view(a, {_r|_|_|-1, _r|_|_|-1});
        EXPECT_EQ(av1, py_av1);
        // py_av2 = a[1:-3, -3:2:-1]
        auto av2 = xt::strided_view(a, {_r|1|-3, _r|-3|2|-1});
        EXPECT_EQ(av2, py_av2);
        // py_av3 = a[-1:-4:-1, -3:1:-2]
        auto av3 = xt::strided_view(a, {_r|-1|-4|-1, _r|-3|1|-2});
        EXPECT_EQ(av3, py_av3);
        auto av4 = xt::strided_view(a, {_r|-3|-5, _r|-3|10});
        EXPECT_EQ(av4.size(), 0);
        // py_av5 = a[-5:-2, -3:10]
        auto av5 = xt::strided_view(a, {_r|-5|-2, _r|-3|10});
        EXPECT_EQ(av5, py_av5);
    }

    /*py
    a = np.arange(35).reshape(5, 7)
    a[0:-2] += a[:3:-1]
    at = np.copy(a)
    at[::-2] += at[::2]
    */
    TEST(xstrided_view_extended, negative_slices_math)
    {
        xt::xarray<double> a = xt::arange(35);
        a.reshape({5, 7});
        strided_view(a, {_r|0|-2}) += strided_view(a, {{_r|_|3|-1}});
        // py_a
        EXPECT_EQ(a, py_a);
        strided_view(a, {_r|_|_|-2}) += strided_view(a, {_r|_|_|2});
        // py_at
        EXPECT_EQ(a, py_at);
    }
}